using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace tana_gh.UnityDotG.Editor
{
    internal static class CodeGen
    {
        [InitializeOnLoadMethod]
        private static void Initialize()
        {
            if (UnityDotGSettings.GenerateRunning)
            {
                UnityDotGSettings.GenerateRunning = false;
            }
            else if (UnityDotGSettings.GenerateOnCompile)
            {
                GenerateAllFiles();
            }
        }

        internal static void GenerateAllFiles()
        {
            if (UnityDotGSettings.GenerateRunning) return;
            UnityDotGSettings.GenerateRunning = true;

            var contexts = new List<CodeGenContext>();

            foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
            {
                foreach (var type in assembly.GetTypes())
                {
                    if (type.GetCustomAttributes(typeof(CodeGenAttribute), false).Length > 0)
                    {
                        var context = Generate(type);
                        if (context != null)
                        {
                            contexts.Add(context);
                        }
                    }
                }
            }

            var changed = false;
            foreach (var (path, content) in contexts.SelectMany(ctx => ctx.pathAndContents))
            {
                changed |= WriteFile(path, content);
            }

            if (changed)
            {
                AssetDatabase.Refresh();
                AssetDatabase.SaveAssets();
            }
        }

        private static CodeGenContext Generate(Type codeGen)
        {
            var generate = codeGen.GetMethod("Generate");

            if (generate == null || !generate.IsPublic || !generate.IsStatic || generate.ReturnType != typeof(void))
            {
                LogErrorOfNoGenerateMethod(codeGen);
                return null;
            }
            else
            {
                var parameters = generate.GetParameters();

                if (parameters.Length != 1 || parameters[0].ParameterType != typeof(CodeGenContext))
                {
                    LogErrorOfNoGenerateMethod(codeGen);
                    return null;
                }
            }

            var context = new CodeGenContext();
            generate.Invoke(null, new object[] { context });
            return context;
        }

        private static void LogErrorOfNoGenerateMethod(Type codeGen)
        {
            Debug.LogError($"Type {codeGen} does not have a `public static void Generate(CodeGenContext context)` method.");
        }

        private static bool WriteFile(string path, string content)
        {
            var generatedContent = $"// <auto-generated/>{Environment.NewLine}// This file is generated by UnityDotG. Do not modify it manually.{Environment.NewLine}{content}";
            
            try
            {
                var oldContent = File.ReadAllText(path, Encoding.UTF8);
                if (oldContent == generatedContent) return false;
            }
            catch (IOException)
            {
                // File does not exist
            }

            Directory.CreateDirectory(Path.GetDirectoryName(path));
            File.WriteAllText(path, generatedContent, Encoding.UTF8);
            return true;
        }
    }
}
